// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package collector

import (
	"encoding/json"
)

// A NelReport describes a single network error report.
//
// (The name is a bit of a misnomer; it can also represent other report payloads
// uploaded via the Reporting API, in which case ReportType will tell you what
// kind of report it is, and RawBody will contain the unparsed JSON `body`
// field.  It can also represent information about successful HTTP requests,
// collected and delivered via a user agent's NEL stack, in which case the Type
// field will be "ok".)
type NelReport struct {
	// The number of milliseconds between when the report was generated by
	// the user agent and when it was uploaded.
	Age int
	// The type of report.  For NEL, this will be "network-error".
	ReportType string
	// The URL of the request that this report describes.
	URL string
	// The referrer information of the request, as determined by the
	// referrer policy associated with its client.
	Referrer string
	// The active sampling rate for this request, expressed as a fraction
	// between 0.0 and 1.0 (inclusive).
	SamplingFraction float32
	// The IP address of the host to which the user agent set the request.
	ServerIP string
	// The ALPN ID  of the network protocol used to fetch the resource.
	Protocol string
	// The status code of the HTTP response, if available.
	StatusCode int
	// The elapsed number of milliseconds between the start of the resource
	// fetch and when it was aborted by the user agent.
	ElapsedTime int
	// The description of the error type.  For reports about successful
	// requests, this will be "ok".  See the NEL spec for the authoritative
	// list of possible values for failed requests.
	Type string

	// For non-NEL reports, this will contain the unparsed JSON content of
	// the report's `body` field.
	RawBody []byte

	// An arbitrary set of extra data that you can attach to your reports.
	Annotations
}

type rawReport struct {
	Age        int             `json:"age"`
	ReportType string          `json:"type"`
	URL        string          `json:"url"`
	Body       json.RawMessage `json:"body"`
}

type nelReportBody struct {
	URI              string  `json:"uri"`
	Referrer         string  `json:"referrer"`
	SamplingFraction float32 `json:"sampling-fraction"`
	ServerIP         string  `json:"server-ip"`
	Protocol         string  `json:"protocol"`
	StatusCode       int     `json:"status-code"`
	ElapsedTime      int     `json:"elapsed-time"`
	Type             string  `json:"type"`
}

// UnmarshalJSON unmarshals the JSON payload as defined by the Reporting and NEL
// specs into a NelReport object.  (It correctly handles the nested structure of
// the JSON, filling in the fields of the non-nested NelReport type.)
func (r *NelReport) UnmarshalJSON(b []byte) error {
	var raw rawReport
	err := json.Unmarshal(b, &raw)
	if err != nil {
		return err
	}
	r.Age = raw.Age
	r.ReportType = raw.ReportType
	r.URL = raw.URL

	if raw.ReportType == "network-error" {
		var body nelReportBody
		err = json.Unmarshal(raw.Body, &body)
		if err != nil {
			return err
		}
		r.Referrer = body.Referrer
		r.SamplingFraction = body.SamplingFraction
		r.ServerIP = body.ServerIP
		r.Protocol = body.Protocol
		r.StatusCode = body.StatusCode
		r.ElapsedTime = body.ElapsedTime
		r.Type = body.Type
	} else {
		r.RawBody = raw.Body
	}

	return nil
}

// MarshalJSON marshals a NEL report into a JSON payload as defined by the
// Reporting and NEL specs.  (It correctly handles the nested structure of the
// JSON, extracting the fields of the non-nested NelReport type.)
func (r NelReport) MarshalJSON() ([]byte, error) {
	var body []byte
	var err error
	if r.ReportType == "network-error" {
		body, err = json.Marshal(nelReportBody{
			URI:              r.URL,
			Referrer:         r.Referrer,
			SamplingFraction: r.SamplingFraction,
			ServerIP:         r.ServerIP,
			Protocol:         r.Protocol,
			StatusCode:       r.StatusCode,
			ElapsedTime:      r.ElapsedTime,
			Type:             r.Type,
		})
		if err != nil {
			return nil, err
		}
	} else {
		body = r.RawBody
	}

	return json.Marshal(rawReport{
		Age:        r.Age,
		ReportType: r.ReportType,
		URL:        r.URL,
		Body:       body,
	})
}
